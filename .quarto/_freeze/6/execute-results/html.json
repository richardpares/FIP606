{
  "hash": "dd788842a38287bcdf76218229272cf5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Importación de datos\"\nauthor: \"Richard Pardes-Espinosa\"\ndata: \"2024-07-01\"\nformat: html\neditor: visual\neditor_options: \n  chunk_output_type: console\ntoc: true\nnumber-sections: true\ncode-fold: show\ncode-summary: \"ver código\"\n---\n\n\n\n## tible::trible()\n\nLa función tibble::tribble permite crear una tabla de manera rápida y legible, siendo especialmente útil para pequeños conjuntos de datos. Cada fila de datos se escribe en una nueva línea y las columnas se especifican con el símbolo ~.\n\nPara utilizar esta función, primero genera un objeto llamado **datos**. A continuación, en el archivo de **Excel**, selecciona y copia las columnas y filas que contienen los datos que deseas trabajar. En RStudio, dirígete al menú superior y haz clic en el botón **Addins**. Se abrirá una ventana con diferentes opciones, donde deberás seleccionar **Paste as tribble**. Esto pegará los datos en el formato adecuado para crear una tabla en R utilizando **tibble::tribble**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar librerías\nlibrary(tidyverse)\n\n# Llamar datos\ndato <- tibble::tribble(\n              ~\"trat\", ~\"rep\", ~\"comp\",\n              \"Mg2\",   1L,     9,\n              \"Mg2\",   2L,  12.5,\n              \"Mg2\",   3L,    10,\n              \"Mg2\",   4L,     8,\n              \"Mg2\",   5L,  13.2,\n              \"Mg2\",   6L,    11,\n              \"Mg2\",   7L,  10.8,\n              \"Mg2\",   8L,   9.5,\n              \"Mg2\",   9L,  10.8,\n              \"Mg2\",  10L,  10.4,\n          \"control\",   1L, 13.72,\n          \"control\",   2L, 15.91,\n          \"control\",   3L,  15.7,\n          \"control\",   4L,  14.2,\n          \"control\",   5L,  15.9,\n          \"control\",   6L, 16.54,\n          \"control\",   7L,    18,\n          \"control\",   8L,  14.4,\n          \"control\",   9L, 16.41,\n          \"control\",  10L,    16\n          )\n```\n:::\n\n\nAhora, visualiza la base de datos de la siguiente manera:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndato\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 3\n   trat      rep  comp\n   <chr>   <int> <dbl>\n 1 Mg2         1   9  \n 2 Mg2         2  12.5\n 3 Mg2         3  10  \n 4 Mg2         4   8  \n 5 Mg2         5  13.2\n 6 Mg2         6  11  \n 7 Mg2         7  10.8\n 8 Mg2         8   9.5\n 9 Mg2         9  10.8\n10 Mg2        10  10.4\n11 control     1  13.7\n12 control     2  15.9\n13 control     3  15.7\n14 control     4  14.2\n15 control     5  15.9\n16 control     6  16.5\n17 control     7  18  \n18 control     8  14.4\n19 control     9  16.4\n20 control    10  16  \n```\n\n\n:::\n:::\n\n\n## read_csv()\n\nLa función `read_csv` de `readr` (parte del tidyverse) para importar datos desde una URL que apunta a un archivo CSV, asignando el contenido a la variable `cr`. Esta función lee y convierte el archivo CSV en un dataframe, facilitando el análisis posterior de los datos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar librerías\nlibrary(tidyverse)\n\n# Llamar datos\ncr <- read_csv(\"https://raw.githubusercontent.com/emdelponte/paper-coffee-rust-Ethiopia/master/data/survey_clean.csv\")\n```\n:::\n\nAhora, corre los códigos y observa la base de datos importada.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ver el objeto cr\nglimpse(cr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 405\nColumns: 13\n$ farm            <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,…\n$ region          <chr> \"SNNPR\", \"SNNPR\", \"SNNPR\", \"SNNPR\", \"SNNPR\", \"SNNPR\", …\n$ zone            <chr> \"Bench Maji\", \"Bench Maji\", \"Bench Maji\", \"Bench Maji\"…\n$ district        <chr> \"Debub Bench\", \"Debub Bench\", \"Debub Bench\", \"Debub Be…\n$ lon             <dbl> 35.44250, 35.44250, 35.42861, 35.42861, 35.42861, 35.3…\n$ lat             <dbl> 6.904722, 6.904722, 6.904444, 6.904444, 6.904444, 6.90…\n$ altitude        <dbl> 1100, 1342, 1434, 1100, 1400, 1342, 1432, 1100, 1400, …\n$ cultivar        <chr> \"Local\", \"Mixture\", \"Mixture\", \"Local\", \"Local\", \"Mixt…\n$ shade           <chr> \"Sun\", \"Mid shade\", \"Mid shade\", \"Sun\", \"Sun\", \"Mid sh…\n$ cropping_system <chr> \"Plantation\", \"Plantation\", \"Plantation\", \"Plantation\"…\n$ farm_management <chr> \"Unmanaged\", \"Minimal\", \"Minimal\", \"Unmanaged\", \"Unman…\n$ inc             <dbl> 86.70805, 51.34354, 43.20000, 76.70805, 47.15808, 51.3…\n$ sev2            <dbl> 55.57986, 17.90349, 8.25120, 46.10154, 12.25167, 19.91…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Llamar objeto\ncr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 405 × 13\n    farm region zone       district      lon   lat altitude cultivar shade    \n   <dbl> <chr>  <chr>      <chr>       <dbl> <dbl>    <dbl> <chr>    <chr>    \n 1     1 SNNPR  Bench Maji Debub Bench  35.4  6.90     1100 Local    Sun      \n 2     2 SNNPR  Bench Maji Debub Bench  35.4  6.90     1342 Mixture  Mid shade\n 3     3 SNNPR  Bench Maji Debub Bench  35.4  6.90     1434 Mixture  Mid shade\n 4     4 SNNPR  Bench Maji Debub Bench  35.4  6.90     1100 Local    Sun      \n 5     5 SNNPR  Bench Maji Debub Bench  35.4  6.90     1400 Local    Sun      \n 6     6 SNNPR  Bench Maji Debub Bench  35.4  6.90     1342 Mixture  Mid shade\n 7     7 SNNPR  Bench Maji Debub Bench  35.4  6.90     1432 Mixture  Mid shade\n 8     8 SNNPR  Bench Maji Debub Bench  35.4  6.90     1100 Local    Sun      \n 9     9 SNNPR  Bench Maji Debub Bench  35.4  6.89     1400 Local    Sun      \n10    10 SNNPR  Bench Maji Debub Bench  35.4  6.88     1342 Mixture  Mid shade\n# ℹ 395 more rows\n# ℹ 4 more variables: cropping_system <chr>, farm_management <chr>, inc <dbl>,\n#   sev2 <dbl>\n```\n\n\n:::\n:::\n\n\n## gsheet2tbl()\n\nEl paquete `gsheet` ofrece leer y convertir datos de una hoja de cálculo de Google Sheets en un objeto `tbl_df`. Para ello, primero, se carga la librería `gsheet` con `library(gsheet)`, lo cual permite acceder a las funciones de este paquete. Luego, se usa la función `gsheet2tbl()` para importar los datos desde la URL proporcionada de Google Sheets y almacenarlos en un objeto llamado `mg`, facilitando su manipulación y análisis en R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar librerías \nlibrary(gsheet)\n\n# Llamar objeto\nmg <- gsheet2tbl(\"https://docs.google.com/spreadsheets/d/1bq2N19DcZdtax2fQW9OHSGMR0X2__Z9T/edit?gid=373270992#gid=373270992\")\n```\n:::\n\n\nVisualiza la base de datos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 70 × 5\n   Cultura   rep Assess LeafDoctor ImageJ\n   <chr>   <dbl>  <dbl>      <dbl>  <dbl>\n 1 Rosa       21  20.0        31.6  26.0 \n 2 Rosa       22   4.77       13.5   5.16\n 3 Rosa       23  72.1        77.6  69.5 \n 4 Rosa       24  81.4        90.8  82.7 \n 5 Rosa       25  25.8        24.5  13.1 \n 6 Rosa       26  80.4        73.8  69.9 \n 7 Rosa       27  81.7        86.8  88.7 \n 8 Rosa       28   7.02       14.0   6.4 \n 9 Rosa       29  11.2        16.0  10.8 \n10 Rosa       30  79.1        77.0  78.2 \n# ℹ 60 more rows\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}