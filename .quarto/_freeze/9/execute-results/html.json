{
  "hash": "e4833592e489c1dc69bcb36f8905da01",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Gráficos de barras\"\nauthor: \"Richard Pardes-Espinosa\"\ndata: \"2024-07-01\"\nformat: html\neditor: visual\neditor_options: \n  chunk_output_type: console\ntoc: true\nnumber-sections: true\ncode-fold: show\ncode-summary: \"ver código\"\n---\n\n\n## Importar datos\n\nUsando la función **tibble::tribble** se importa los datos de manera rápida. La base contiene a los tratamientos \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar librerías\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(tibble)\nlibrary(tidyverse)\nlibrary(ggpubr)\nlibrary(ggrepel)\nlibrary(dplyr)\n\n# importar datos\ndato <- tibble::tribble(\n              ~\"trat\", ~\"rep\", ~\"comp\",\n              \"Mg2\",   1L,     9,\n              \"Mg2\",   2L,  12.5,\n              \"Mg2\",   3L,    10,\n              \"Mg2\",   4L,     8,\n              \"Mg2\",   5L,  13.2,\n              \"Mg2\",   6L,    11,\n              \"Mg2\",   7L,  10.8,\n              \"Mg2\",   8L,   9.5,\n              \"Mg2\",   9L,  10.8,\n              \"Mg2\",  10L,  10.4,\n          \"control\",   1L, 13.72,\n          \"control\",   2L, 15.91,\n          \"control\",   3L,  15.7,\n          \"control\",   4L,  14.2,\n          \"control\",   5L,  15.9,\n          \"control\",   6L, 16.54,\n          \"control\",   7L,    18,\n          \"control\",   8L,  14.4,\n          \"control\",   9L, 16.41,\n          \"control\",  10L,    16\n          )\ndato\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 3\n   trat      rep  comp\n   <chr>   <int> <dbl>\n 1 Mg2         1   9  \n 2 Mg2         2  12.5\n 3 Mg2         3  10  \n 4 Mg2         4   8  \n 5 Mg2         5  13.2\n 6 Mg2         6  11  \n 7 Mg2         7  10.8\n 8 Mg2         8   9.5\n 9 Mg2         9  10.8\n10 Mg2        10  10.4\n11 control     1  13.7\n12 control     2  15.9\n13 control     3  15.7\n14 control     4  14.2\n15 control     5  15.9\n16 control     6  16.5\n17 control     7  18  \n18 control     8  14.4\n19 control     9  16.4\n20 control    10  16  \n```\n\n\n:::\n:::\n\n\n## Visualización de medias en gráfico de barras\n\nEl código crea un gráfico de barras utilizando los datos del tibble `dato`. Se usa `ggplot()` para definir los mapeos estéticos donde `trat` se asigna al eje x, `comp` al eje y, y `trat` determina el color de relleno de las barras. `geom_bar()` se utiliza con `stat = \"identity\"` para representar las alturas de las barras según los valores en `comp`, utilizando `position_dodge(0.9)` para separar las barras de diferentes tratamientos. Se aplica un tema clásico con `theme_classic()`, se añade un título al gráfico con `ggtitle()`, y se etiquetan los ejes x e y con `xlab()` y `ylab()`, respectivamente. La paleta de colores se personaliza con `scale_fill_manual()` asignando colores específicos a los tratamientos \"Mg2\" y \"control\" para facilitar la distinción visual en la leyenda.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Gráfico de barras\ndato |> \n  ggplot(aes(x = trat, \n             y = comp,\n             fill = trat)) +\n  geom_bar(stat = \"identity\", \n           position = position_dodge (0.9), \n           width = 0.8) + \n  theme_classic() +\n  ggtitle(\"Crecimiento de plantas\") +\n  xlab(\"Tratamientos\") +\n  ylab(\"Crecimiento (cm)\") +\n  scale_fill_manual(values = c(\"Mg2\" = \"#63B8FF\", \"control\" = \"#FFFF00\"),\n                    name = \"Tratamientos\",\n                    labels = c(\"Magnesio\", \"Control\"))\n```\n\n::: {.cell-output-display}\n![](9_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n## Visualización de medias y SD en gráfico de barras\n\nPrimero, se calculan las medias y errores estándar de la variable `comp` agrupando los datos por `trat` mediante `group_by()` y `summarise()`. Luego, con `ggplot()`, se crea un gráfico de barras donde el eje x representa los tratamientos, el eje y las medias de `comp`, y las barras se rellenan según el tratamiento. Se utiliza `geom_bar()` para las barras y `geom_errorbar()` para las barras de error, mientras que `scale_fill_brewer()` aplica una paleta de colores. Las etiquetas y el tema del gráfico se personalizan con `labs()` y `theme_classic()`, ajustando los ejes y la leyenda con `scale_y_continuous()` y `theme()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calcular medias y errores estándar\nmedias <- dato |> \n  group_by(trat)  |> \n  summarise(mean_comp = mean(comp),\n            sd_comp = sd(comp),\n            se_comp = sd(comp) / sqrt(n()))\n\n# Crear el gráfico de barras con medias y errores estándar\nplot1 <- medias |> \n  ggplot(aes(x = trat, \n             y = mean_comp, \n             fill = trat)) +\n  geom_bar(stat = \"identity\", \n           position = position_dodge(width = 0.8), \n           width = 0.7, \n           color = \"black\") +\n  geom_errorbar(aes(ymin = mean_comp - se_comp, \n                    ymax = mean_comp + se_comp),\n                position = position_dodge(width = 0.8), \n                width = 0.2, color = \"black\") +\n  scale_fill_brewer(palette = \"Blues\") +\n  labs(subtitle = \" \",\n       x = \"Tratamientos\",\n       y = \"Crecimiento (cm)\",\n       fill = \"Tratamientos\") +\n  theme_classic() +\n  scale_y_continuous(expand = c(0, 0), \n                     limits = c(0, 25), \n                     breaks = seq(0, 25, \n                                  by = 5)) +\n  theme(axis.text.x = element_text(size = 20, \n                                   color = \"black\", \n                                   hjust = 0.5, \n                                   vjust = 1),\n        axis.text.y = element_text(size = 20, \n                                   color = \"black\", \n                                   hjust = 1, \n                                   vjust = 0.4),\n        axis.title = element_text(size = 20, \n                                  color = \"black\"),\n        legend.position = c(0.12, 0.90),\n        legend.background = element_rect(color = NULL),\n        legend.text = element_text(size = 14),\n        legend.title = element_text(size = 14)) \nplot1\n```\n\n::: {.cell-output-display}\n![](9_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nFinalmente, a plot1 adicionaremos `geom_text()`, el cual añade las medias redondeadas como etiquetas encima de las barras.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Colocar las medias\nplot1 + geom_text(data = medias,\n            aes(label = round(mean_comp, 2), \n                y = mean_comp + 2),\n            size = 7, \n            hjust = 0.5)\n```\n\n::: {.cell-output-display}\n![](9_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Visualización de medias, SD y comparación de medias en gráfico de barras\n\nEn comparación con el código anterior, este script añade un nuevo tibble `legenda` que contiene coordenadas `x`, `y` y etiquetas `label` para las letras \"A\" y \"B\". Luego, en la sección de creación del gráfico, se añade `geom_text()` utilizando los datos de `legenda` para colocar las letras \"A\" y \"B\" en las coordenadas especificadas (`x = x`, `y = y`, `label = label`). Este nuevo `geom_text()` se posiciona de acuerdo con las coordenadas definidas y se establece `inherit.aes = F` para que no herede los mapeos estéticos del gráfico principal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# adicionar letras \nlegenda <- tibble(x = c(1,2), \n                   y = c(18,13), \n                   label = c(\"A\",\"B\"))\n\n# Crear el gráfico de barras con medias y errores estándar\nplot1 + geom_text(legenda, \n            mapping = aes (x = x, \n                           y = y, \n                           label = label), \n            size = 7, \n            inherit.aes = F)\n```\n\n::: {.cell-output-display}\n![](9_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nEn comparación con el código anterior, esta variación introduce un vector `plot1` que almacena la mayoría de los componentes del gráfico, permitiendo reutilizarlo y simplificando la adición de nuevas capas y modificaciones. En este caso, se añaden las etiquetas con `geom_text()` utilizando los datos de legenda, y se ajusta la posición de la leyenda con `theme(legend.position = c(0.8, 0.90))`. Finalmente, se gira el gráfico para que las barras se muestren horizontalmente utilizando `coord_flip()`. Esto facilita la organización y modificación del código al centralizar los componentes básicos del gráfico en el vector plot1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crear el gráfico de barras con medias y errores estándar\nplot1 + geom_text(legenda, \n            mapping = aes (x = x, \n                           y = y, \n                           label = label), \n            size = 7, \n            inherit.aes = F) +\n  theme(legend.position = c(0.8, 0.90)) + \n          coord_flip()\n```\n\n::: {.cell-output-display}\n![](9_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "9_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}