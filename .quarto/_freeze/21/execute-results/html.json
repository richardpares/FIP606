{
  "hash": "6469b5492e56a1d1e13d289e8638ff19",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tópico 2\"\nauthor: \"Richard Pardes-Espinosa\"\ndata: \"2024-03-20\"\nformat: html\neditor: visual\neditor_options: \n  chunk_output_type: console\ntoc: true\nnumber-sections: true\ncode-fold: show\ncode-summary: \"ver código\"\n---\n\n\n\n## Importar datos\n\nUsando la función **tibble::tribble** se importa los datos de manera rápida. La base contiene a los tratamientos \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cargar librerías \nlibrary(tibble)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(multcompView)\nlibrary(performance)\nlibrary(DHARMa)\nlibrary(car)\n  \n# Llamar datos\nbac <- tibble::tribble(\n                    ~trat, ~inib,\n            \"sulfonamida\",   1.8,\n            \"sulfonamida\",     2,\n            \"sulfonamida\",   1.9,\n         \"estreptomicina\",   1.9,\n         \"estreptomicina\",   2.1,\n         \"estreptomicina\",     2,\n         \"ciprofloxacina\",     1,\n         \"ciprofloxacina\",     1,\n         \"ciprofloxacina\",     1,\n            \"rifampicina\",   2.6,\n            \"rifampicina\",   2.8,\n            \"rifampicina\",   2.7\n         )\nbac\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n   trat            inib\n   <chr>          <dbl>\n 1 sulfonamida      1.8\n 2 sulfonamida      2  \n 3 sulfonamida      1.9\n 4 estreptomicina   1.9\n 5 estreptomicina   2.1\n 6 estreptomicina   2  \n 7 ciprofloxacina   1  \n 8 ciprofloxacina   1  \n 9 ciprofloxacina   1  \n10 rifampicina      2.6\n11 rifampicina      2.8\n12 rifampicina      2.7\n```\n\n\n:::\n:::\n\n\n## Transformación de la variable dependiente\n\nEl código primero transforma la variable `inib` del dataset `bac` mediante la función `mutate` de dplyr, creando una nueva variable llamada `inib_log` que es el logaritmo natural de `inib` incrementado en 1 para evitar problemas con valores cero. Luego, ajusta un modelo ANOVA utilizando `lm` para analizar la relación entre la variable transformada `inib_log` y el tratamiento `trat`. Finalmente, se muestra un resumen del modelo ajustado con `summary(m1_log)`, proporcionando detalles estadísticos del modelo, incluyendo coeficientes, errores estándar y significancia.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transformar la variable inib\nbac <- bac |> \n  mutate(inib_log = log(inib + 1))\n\n# Ajustar el modelo ANOVA\nm1_log <- lm(inib_log ~ trat, \n              data = bac)\nsummary(m1_log)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = inib_log ~ trat, data = bac)\n\nResiduals:\n      Min        1Q    Median        3Q       Max \n-0.034695 -0.006789  0.000122  0.007025  0.034298 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(>|t|)    \n(Intercept)         0.69315    0.01590   43.60 8.45e-11 ***\ntratestreptomicina  0.40509    0.02248   18.02 9.24e-08 ***\ntratrifampicina     0.61494    0.02248   27.35 3.44e-09 ***\ntratsulfonamida     0.37117    0.02248   16.51 1.83e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.02754 on 8 degrees of freedom\nMultiple R-squared:  0.9898,\tAdjusted R-squared:  0.986 \nF-statistic: 258.7 on 3 and 8 DF,  p-value: 2.656e-08\n```\n\n\n:::\n:::\n\n\n## Supuestos de Normalidad y Homocedasticidad\n\nEste script en RStudio para Quarto verifica la normalidad y homocedasticidad de los residuos de un modelo lineal `m1_log`. Primero, la función `check_normality(m1_log)` evalúa si los residuos siguen una distribución normal, lo cual es crucial para la validez de muchos análisis estadísticos. Luego, `check_heteroscedasticity(m1_log)` revisa si la varianza de los residuos es constante a lo largo de los valores predichos, condición conocida como homocedasticidad. Finalmente, `plot(simulateResiduals(m1_log))` genera gráficos de los residuos simulados del modelo para visualizar estos aspectos y otros posibles problemas, proporcionando una evaluación gráfica completa del ajuste del modelo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# normalidad y homocedasticidad \ncheck_normality(m1_log)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOK: residuals appear as normally distributed (p = 0.070).\n```\n\n\n:::\n\n```{.r .cell-code}\ncheck_heteroscedasticity(m1_log)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nOK: Error variance appears to be homoscedastic (p = 0.296).\n```\n\n\n:::\n\n```{.r .cell-code}\n# Normalidad y homocedasticidad \nplot(simulateResiduals(m1_log))\n```\n\n::: {.cell-output-display}\n![](21_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## ANOVA\n\nEste script realiza un análisis de varianza (ANOVA) utilizando el modelo lineal general con `aov()` para evaluar la influencia del tratamiento (`trat`) en la variable de respuesta (`inib`), utilizando datos del objeto `bac`. El análisis identifica si existen diferencias significativas entre los tratamientos. Luego, se aplica el test de Tukey (`TukeyHSD()`) para realizar comparaciones múltiples entre los tratamientos y determinar cuáles son estadísticamente diferentes entre sí, imprimiendo los resultados con `tukey`. Finalmente, se utiliza `multcompLetters4()` para generar letras de comparación que indican grupos estadísticamente similares, basadas en los resultados de Tukey, y se imprimen con `cld`. Este proceso ayuda a identificar y categorizar diferencias significativas entre tratamientos en el estudio.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Anova para correr con TukeyHSD\nANOVA <- aov(inib_log ~ trat, \n              data = bac)\n\n# Test de Tukey\ntukey <- TukeyHSD(ANOVA)\ntukey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Tukey multiple comparisons of means\n    95% family-wise confidence level\n\nFit: aov(formula = inib_log ~ trat, data = bac)\n\n$trat\n                                     diff        lwr         upr     p adj\nestreptomicina-ciprofloxacina  0.40509453  0.3330948  0.47709430 0.0000004\nrifampicina-ciprofloxacina     0.61494206  0.5429423  0.68694183 0.0000000\nsulfonamida-ciprofloxacina     0.37116697  0.2991672  0.44316674 0.0000009\nrifampicina-estreptomicina     0.20984753  0.1378478  0.28184730 0.0000658\nsulfonamida-estreptomicina    -0.03392756 -0.1059273  0.03807221 0.4754185\nsulfonamida-rifampicina       -0.24377510 -0.3157749 -0.17177533 0.0000216\n```\n\n\n:::\n\n```{.r .cell-code}\n# Comparación con multcompView\ncld <- multcompLetters4(ANOVA, tukey)\ncld\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$trat\n   rifampicina estreptomicina    sulfonamida ciprofloxacina \n           \"a\"            \"b\"            \"b\"            \"c\" \n```\n\n\n:::\n:::\n\n\n## Test de Tukey\n\nSe agrupa el conjunto de datos por el factor `trat` y se calcula la media y el tercer cuartil (Q3) de la variable `inib` utilizando las funciones `group_by`, `summarise` y `quantile`. Luego, se ordena el resultado en orden descendente según la media calculada. Posteriormente, se asignan letras de comparación a los tratamientos en base a un objeto `cld` que contiene estas letras, creando así una nueva columna `cld` en el dataframe `Tk`, que ahora contiene la media, Q3 y las letras de comparación para cada tratamiento.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crear tabla con factor y 3er cuartil (Q3)\nTk <- bac |> \n  group_by(trat) |> \n  summarise(mean = mean(inib), \n            quant = quantile(inib, \n                             probs = 0.75)) |> \n  arrange(desc(mean))\n\n# Asignar letras de comparación a Tk_log basado en cld_log\ncld_df <- as.data.frame.list(cld$trat)\nTk$cld <- cld_df$Letters\nTk\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  trat            mean quant cld  \n  <chr>          <dbl> <dbl> <chr>\n1 rifampicina      2.7  2.75 a    \n2 estreptomicina   2    2.05 b    \n3 sulfonamida      1.9  1.95 b    \n4 ciprofloxacina   1    1    c    \n```\n\n\n:::\n:::\n\n\n## Visualización de resultados\n\nCon la función `mean_cl_boot` se calcula la media y los intervalos de confianza al 99% para un vector `x`. Dentro de la función, `mean(x, na.rm = TRUE)` calcula la media, `sd(x, na.rm = TRUE) / sqrt(length(x))` calcula el error estándar de la media, y luego se calculan `ymin` y `ymax` como límites inferior y superior del intervalo de confianza al 99% respectivamente. El gráfico generado con ggplot utiliza los datos del dataframe `bac`, mapeando `trat` en el eje x y `inib` en el eje y, coloreando por tratamiento (`color = trat`). `stat_summary` utiliza la función `mean_cl_boot` para calcular y representar las medias y los intervalos de confianza como puntos y rangos (`geom = \"pointrange\"`). Además, `geom_text` agrega etiquetas de comparación de letras (`cld`) con ubicaciones específicas (`quant`) para cada tratamiento (`trat`). Se personalizan los colores con `scale_color_brewer`, se aplica un tema minimalista con `theme_minimal`, se etiquetan los ejes y se ajusta el formato del texto y títulos de los ejes con `labs` y `theme`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Función para calcular media e intervalos de confianza al 99%\nmean_cl_boot <- function(x) {\n  m <- mean(x, na.rm = TRUE)\n  se <- sd(x, na.rm = TRUE) / sqrt(length(x))\n  ymin <- m - 2.576 * se  # Intervalo de confianza al 99%\n  ymax <- m + 2.576 * se  # Intervalo de confianza al 99%\n  return(c(y = m, ymin = ymin, ymax = ymax))\n}\n\n# Crear el gráfico con intervalos de confianza más largos\nggplot(bac, aes(x = trat, \n                y = inib, \n                color = trat)) +\n  stat_summary(fun.data = mean_cl_boot, \n               geom = \"pointrange\", \n               size = 0.8) +\n  geom_text(data = Tk, \n            aes(label = cld, \n                y = quant, \n                group = trat), \n            vjust = -0.5, size = 5, \n            fontface = \"bold\", \n            color = \"black\") +\n  scale_color_brewer(palette = \"Paired\") +\n  theme_minimal() +\n  labs(x = \"Tratamientos\", \n       y = \"Crecimiento (Inhibición)\") + \n  theme(axis.text.x = element_text(size = 12, \n                                   color = \"black\", \n                                   angle = 45, \n                                   hjust = 1),\n        axis.text.y = element_text(size = 12, \n                                   color = \"black\"),\n        axis.title = element_text(size = 14, \n                                  color = \"black\"),\n        legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](21_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "21_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}