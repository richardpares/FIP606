---
title: "Tópico 2"
author: "Richard Pardes-Espinosa"
data: "2024-03-20"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
toc: true
number-sections: true
code-fold: show
code-summary: "ver código"
---


## Importar datos

Usando la función **tibble::tribble** se importa los datos de manera rápida. La base contiene a los tratamientos 

```{r}
# Cargar librerías 
library(tibble)
library(ggplot2)
library(dplyr)
library(multcompView)
library(performance)
library(DHARMa)
library(car)
  
# Llamar datos
bac <- tibble::tribble(
                    ~trat, ~inib,
            "sulfonamida",   1.8,
            "sulfonamida",     2,
            "sulfonamida",   1.9,
         "estreptomicina",   1.9,
         "estreptomicina",   2.1,
         "estreptomicina",     2,
         "ciprofloxacina",     1,
         "ciprofloxacina",     1,
         "ciprofloxacina",     1,
            "rifampicina",   2.6,
            "rifampicina",   2.8,
            "rifampicina",   2.7
         )
bac
```

## Transformación de la variable dependiente

El código primero transforma la variable `inib` del dataset `bac` mediante la función `mutate` de dplyr, creando una nueva variable llamada `inib_log` que es el logaritmo natural de `inib` incrementado en 1 para evitar problemas con valores cero. Luego, ajusta un modelo ANOVA utilizando `lm` para analizar la relación entre la variable transformada `inib_log` y el tratamiento `trat`. Finalmente, se muestra un resumen del modelo ajustado con `summary(m1_log)`, proporcionando detalles estadísticos del modelo, incluyendo coeficientes, errores estándar y significancia.

```{r}
# Transformar la variable inib
bac <- bac |> 
  mutate(inib_log = log(inib + 1))

# Ajustar el modelo ANOVA
m1_log <- lm(inib_log ~ trat, 
              data = bac)
summary(m1_log)
```

## Supuestos de Normalidad y Homocedasticidad

Este script en RStudio para Quarto verifica la normalidad y homocedasticidad de los residuos de un modelo lineal `m1_log`. Primero, la función `check_normality(m1_log)` evalúa si los residuos siguen una distribución normal, lo cual es crucial para la validez de muchos análisis estadísticos. Luego, `check_heteroscedasticity(m1_log)` revisa si la varianza de los residuos es constante a lo largo de los valores predichos, condición conocida como homocedasticidad. Finalmente, `plot(simulateResiduals(m1_log))` genera gráficos de los residuos simulados del modelo para visualizar estos aspectos y otros posibles problemas, proporcionando una evaluación gráfica completa del ajuste del modelo.

```{r}
# normalidad y homocedasticidad 
check_normality(m1_log)
check_heteroscedasticity(m1_log)

# Normalidad y homocedasticidad 
plot(simulateResiduals(m1_log))
```

## ANOVA

Este script realiza un análisis de varianza (ANOVA) utilizando el modelo lineal general con `aov()` para evaluar la influencia del tratamiento (`trat`) en la variable de respuesta (`inib`), utilizando datos del objeto `bac`. El análisis identifica si existen diferencias significativas entre los tratamientos. Luego, se aplica el test de Tukey (`TukeyHSD()`) para realizar comparaciones múltiples entre los tratamientos y determinar cuáles son estadísticamente diferentes entre sí, imprimiendo los resultados con `tukey`. Finalmente, se utiliza `multcompLetters4()` para generar letras de comparación que indican grupos estadísticamente similares, basadas en los resultados de Tukey, y se imprimen con `cld`. Este proceso ayuda a identificar y categorizar diferencias significativas entre tratamientos en el estudio.

```{r}
# Anova para correr con TukeyHSD
ANOVA <- aov(inib_log ~ trat, 
              data = bac)

# Test de Tukey
tukey <- TukeyHSD(ANOVA)
tukey

# Comparación con multcompView
cld <- multcompLetters4(ANOVA, tukey)
cld
```

## Test de Tukey

Se agrupa el conjunto de datos por el factor `trat` y se calcula la media y el tercer cuartil (Q3) de la variable `inib` utilizando las funciones `group_by`, `summarise` y `quantile`. Luego, se ordena el resultado en orden descendente según la media calculada. Posteriormente, se asignan letras de comparación a los tratamientos en base a un objeto `cld` que contiene estas letras, creando así una nueva columna `cld` en el dataframe `Tk`, que ahora contiene la media, Q3 y las letras de comparación para cada tratamiento.

```{r}
# Crear tabla con factor y 3er cuartil (Q3)
Tk <- bac |> 
  group_by(trat) |> 
  summarise(mean = mean(inib), 
            quant = quantile(inib, 
                             probs = 0.75)) |> 
  arrange(desc(mean))

# Asignar letras de comparación a Tk_log basado en cld_log
cld_df <- as.data.frame.list(cld$trat)
Tk$cld <- cld_df$Letters
Tk
```

## Visualización de resultados

Con la función `mean_cl_boot` se calcula la media y los intervalos de confianza al 99% para un vector `x`. Dentro de la función, `mean(x, na.rm = TRUE)` calcula la media, `sd(x, na.rm = TRUE) / sqrt(length(x))` calcula el error estándar de la media, y luego se calculan `ymin` y `ymax` como límites inferior y superior del intervalo de confianza al 99% respectivamente. El gráfico generado con ggplot utiliza los datos del dataframe `bac`, mapeando `trat` en el eje x y `inib` en el eje y, coloreando por tratamiento (`color = trat`). `stat_summary` utiliza la función `mean_cl_boot` para calcular y representar las medias y los intervalos de confianza como puntos y rangos (`geom = "pointrange"`). Además, `geom_text` agrega etiquetas de comparación de letras (`cld`) con ubicaciones específicas (`quant`) para cada tratamiento (`trat`). Se personalizan los colores con `scale_color_brewer`, se aplica un tema minimalista con `theme_minimal`, se etiquetan los ejes y se ajusta el formato del texto y títulos de los ejes con `labs` y `theme`.

```{r}
# Función para calcular media e intervalos de confianza al 99%
mean_cl_boot <- function(x) {
  m <- mean(x, na.rm = TRUE)
  se <- sd(x, na.rm = TRUE) / sqrt(length(x))
  ymin <- m - 2.576 * se  # Intervalo de confianza al 99%
  ymax <- m + 2.576 * se  # Intervalo de confianza al 99%
  return(c(y = m, ymin = ymin, ymax = ymax))
}

# Crear el gráfico con intervalos de confianza más largos
ggplot(bac, aes(x = trat, 
                y = inib, 
                color = trat)) +
  stat_summary(fun.data = mean_cl_boot, 
               geom = "pointrange", 
               size = 0.8) +
  geom_text(data = Tk, 
            aes(label = cld, 
                y = quant, 
                group = trat), 
            vjust = -0.5, size = 5, 
            fontface = "bold", 
            color = "black") +
  scale_color_brewer(palette = "Paired") +
  theme_minimal() +
  labs(x = "Tratamientos", 
       y = "Crecimiento (Inhibición)") + 
  theme(axis.text.x = element_text(size = 12, 
                                   color = "black", 
                                   angle = 45, 
                                   hjust = 1),
        axis.text.y = element_text(size = 12, 
                                   color = "black"),
        axis.title = element_text(size = 14, 
                                  color = "black"),
        legend.position = "none")
```







